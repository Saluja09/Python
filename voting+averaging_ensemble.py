# -*- coding: utf-8 -*-
"""Voting+averaging Ensemble.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DoSWL8gdNfbypRtnIFf6pY1j1tDaV1GV
"""

import numpy as np

# Sample list of model predictions
model1_predictions = [0, 1, 0, 1, 1]
model2_predictions = [1, 0, 1, 0, 0]
model3_predictions = [1, 1, 0, 1, 0]

# Voting Ensemble Function
def voting_ensemble(predictions_list):
    num_models = len(predictions_list)
    num_samples = len(predictions_list[0])
    final_predictions = []

    for i in range(num_samples):
        # Create a dictionary to count the votes for each class
        votes = {}

        for j in range(num_models):
            prediction = predictions_list[j][i]

            if prediction in votes:
                votes[prediction] += 1
            else:
                votes[prediction] = 1

        # Find the class with the most votes
        final_prediction = max(votes, key=votes.get)
        final_predictions.append(final_prediction)

    return final_predictions

# Averaging Ensemble Function
def averaging_ensemble(predictions_list):
    num_models = len(predictions_list)
    num_samples = len(predictions_list[0])
    final_predictions = []

    for i in range(num_samples):
        # Calculate the average prediction for each sample
        avg_prediction = np.mean([predictions_list[j][i] for j in range(num_models)])
        final_predictions.append(round(avg_prediction))  # Round to the nearest integer for classification

    return final_predictions

# Create a list of predictions from multiple models
predictions_list = [model1_predictions, model2_predictions, model3_predictions]

# Perform Voting Ensemble
voting_result = voting_ensemble(predictions_list)
print("Voting Ensemble Result:", voting_result)

# Perform Averaging Ensemble
averaging_result = averaging_ensemble(predictions_list)
print("Averaging Ensemble Result:", averaging_result)